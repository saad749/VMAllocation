@{
    ViewBag.Title = "Home Page";
}

<div class="">
    <h1>VM Automatic Allocation</h1>
    <p class="lead">Virtual Machine Allocation Automation in Clouds Simulation</p>
</div>
<div class="row">
    <div class="text-center">
        @using (Html.BeginForm("ProcessTopology", "Home", FormMethod.Post, new { id = "dataForm", @class = "" }))
        {
            @*<input type="hidden" name="CloudSpecifications" id="hidCloudSpecifications"/>
            <input type="hidden" name="UserRequirements" id="hidUserRequirements"/>
            <input type="hidden" name="Connections" id="hidConnections"/>*@
            <input type="hidden" name="model" id="hidModel" />
            <button class="btn btn-danger" onclick="resetMap();" type="button">Clear Local Storage</button>
            <button class="btn btn-success" onclick="sendData();" type="submit">Process Topology</button>
        }
        
    </div>
</div>
<br/>
<div class="row">
    <div id="map" style="height: 700px; width: 100%;"></div>
</div>


<!-- Modal -->
<div class="modal fade" id="locationModal" tabindex="-1" role="dialog" aria-labelledby="locationModalLabel">
    <div class="modal-dialog" role="form">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Set Location Details</h4>
            </div>
            <div class="modal-body">
                <!--Location Type-->
                <form id="locationForm">
                    <div class="form-group">
                        <label for="locationTitle">Location Title</label>
                        <input type="text" class="form-control" id="locationTitle" placeholder="Location Title">
                    </div>
                    <div class="form-group">
                        <label for="locationType">Location Type</label>
                        <select id="locationType" class="form-control">
                            <option value="user">User Location</option>
                            <option value="cloud">Cloud Data Center Location</option>
                        </select>
                    </div>
                </form>
                <!--Common Params-->
                <form id="commonForm">
                    <div class="form-group">
                        <label for="cpuCount">CPU Count</label>
                        <input type="text" class="form-control" id="cpuCount" placeholder="CPU Count" value="10000">
                    </div>
                    <div class="form-group">
                        <label for="memorySize">Memory Size (GB)</label>
                        <input type="text" class="form-control" id="memorySize" placeholder="Memory Size (GB)" value="160000">
                    </div>
                    <div class="form-group">
                        <label for="networkBandwidth">Network Bandwidth (MB/sec)</label>
                        <input type="text" class="form-control" id="networkBandwidth" placeholder="Network Bandwidth (MB/sec)" value="1000">
                    </div>
                    
                </form>
                <!--Cloud Costs-->
                <form id="cloudForm">
                    <div class="form-group">
                        <label for="cpuCost">CPU Unit Cost Per Hour (QAR)</label>
                        <input type="text" class="form-control" id="cpuCost" placeholder="CPU Unit Cost Per Hour (QAR)">
                    </div>
                    <div class="form-group">
                        <label for="memoryCost">Memory Unit Cost Per Hour (QAR)</label>
                        <input type="text" class="form-control" id="memoryCost" placeholder="Memory Unit Cost Per Hour">
                    </div>
                    <div class="form-group">
                        <label for="networkCost">Network Unit Cost Per Hour (QAR)</label>
                        <input type="text" class="form-control" id="networkCost" placeholder="Network Unit Cost Per Hour">
                    </div>
                </form>
                <!--User Thresholds-->
                <form id="thresholdForm">
                    <div class="form-group">
                        <label for="distanceThreshold">Distance Threshold (km)</label>
                        <input type="text" class="form-control" id="distanceThreshold" placeholder="Distance Threshold (km)" >
                    </div>
                    <div class="form-group">
                        <label for="costThreshold">Cost Threshold (QAR)</label>
                        <input type="text" class="form-control" id="costThreshold" placeholder="Cost Threshold (QAR)">
                    </div>
                    <div class="form-group">
                        <label for="externalNetworkBandwidth">Link Bandwidth Threshold (MB/sec)</label>
                        <input type="text" class="form-control" id="externalNetworkBandwidth" placeholder="Link Bandwidth Threshold (MB/sec)" value="1000">
                    </div>
                    @*<div class="form-group"> <!--No Need of this as External Bandwidth requirement is a Common Requirement for User & Data Center-->
                        <label for="bandwidthThreshold">Bandwidth Threshold (MB/Sec)</label>
                        <input type="text" class="form-control" id="bandwidthThreshold" placeholder="Bandwidth Threshold (MB/Sec)">
                    </div>*@
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="setRequirements(eventData);">Save changes</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="linkModal" tabindex="-1" role="dialog" aria-labelledby="linkModalLabel">
    <div class="modal-dialog" role="form">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="linkModalLabel">Set Location Details</h4>
            </div>
            <div class="modal-body">
                <!--Location Type-->
                <form id="linkForm">
                    <div class="form-group">
                        <label for="linkTitle">Link Title</label>
                        <input type="text" class="form-control" id="linkTitle" placeholder="Link Title">
                    </div>
                    <div class="form-group">
                        <label for="linkBandwidth">Link Bandwidth (MB/sec)</label>
                        <input type="text" class="form-control" id="linkBandwidth" placeholder="Link Bandwidth (MB/sec)">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="setLink(linkEventData);">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        //Network Bandwidth === Bandwidth within cloud
        //User Bandwidth || Bandwidth Threshold === Bandwidth accessible to User
        //After the change in specifications, as discussed with Mr. Deval, I will remove the userId and cloudId from the marker and replace it witha
        //marker.universalId
        var map;
        var centerMapDubai = { lat: 24.95, lng: 55.333333 };
        var centerMapQatar = { lat: 25.27932000, lng: 51.52245000 };
        var centerMap = centerMapDubai;
        var connectStartPoint;
        var connectEndPoint;
        var connectStartPointId;
        var connectEndPointId;
        var eventData;
        var linkEventData;
        var markers = [];
        var dataCenterSizecircles = [];
        var connections = [];
        var connectionStartMarker;
        var universalIdCounter = 0;
        var linkBandwidth;
        $('#cloudForm').hide();

        //$('#thresholdForm').hide(); //By Default its the user Threshold Form

        /* *
          * The CenterControl adds a control to the map that recenters the map on
          * The Center Map Location provided.
          * This constructor takes the control DIV as an argument. * constructor
        */

        function CenterControl(controlDiv, map) {

            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.border = '2px solid #fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginBottom = '22px';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to recenter the map';
            controlDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.innerHTML = 'Center To Origin';
            controlUI.appendChild(controlText);

            // Setup the click event listeners: simply set the map to Chicago.
            controlUI.addEventListener('click', function() {
                map.setCenter(centerMap);
            });

        }


        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: centerMap,
                zoom: 6
            });

            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var centerControlDiv = document.createElement('div');
            var centerControl = new CenterControl(centerControlDiv, map);

            centerControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);


            map.addListener('click', function(event) {
                $('#locationModal').modal('show');
                eventData = event;
            });


        }

        $(function() {
            loadMapFromLocalStorage();
        });

        function setRequirements(event) {
            console.log("settingRequirements", eventData);
            var locationTitle = $('#locationTitle').val();
            var locationType = $('#locationType').val();

            var cpuCount = $('#cpuCount').val();
            var memorySize = $('#memorySize').val();
            var networkBandwidth = $('#networkBandwidth').val();
            
            if (locationType === "cloud") {
                var cpuCost = $('#cpuCost').val();
                var memoryCost = $('#memoryCost').val();
                var networkCost = $('#networkCost').val();
            }

            if (locationType === "user") {
                var distanceThreshold = $('#distanceThreshold').val();
                var costThreshold = $('#costThreshold').val();
                var externalNetworkBandwidth = $('#externalNetworkBandwidth').val();
            }

            var location = event.latLng;

            //var cloudId;
            //var userId;
            
            var universalId = universalIdCounter;
            universalIdCounter++;

            //if (locationType === "cloud") {
            //    cloudId = cloudIdCounter;
            //} else if (locationType === "user") {
            //    userId = userIdCounter;
            //}


            $('#locationTitle').val(null);
            $('#cpuCount').val(10000);
            $('#cpuCost').val(null);
            $('#memorySize').val(160000);
            $('#memoryCost').val(null);
            $('#networkBandwidth').val(1000);
            $('#networkCost').val(null);
            $('#distanceThreshold').val(null);
            $('#costThreshold').val(null);
            $('#externalNetworkBandwidth').val(null);

            var values;
            if (locationType === "user") {
                values = {
                    locationTitle,
                    locationType,
                    cpuCount,
                    memorySize,
                    networkBandwidth,
                    distanceThreshold,
                    costThreshold,
                    externalNetworkBandwidth,
                    location,
                    universalId
                }
            }

            if (locationType === "cloud") {
                values = {
                    locationTitle,
                    locationType,
                    cpuCount,
                    memorySize,
                    networkBandwidth,
                    cpuCost,
                    memoryCost,
                    networkCost,
                    location,
                    universalId
                }
            }

            //var values = {
            //    locationTitle,
            //    locationType,
            //    cpuCount,
            //    memorySize,
            //    networkBandwidth,
            //    cpuCost,
            //    memoryCost,
            //    networkCost,
            //    distanceThreshold,
            //    costThreshold,
            //    location,
            //    universalId
            //}

            console.log("JustbeforeSettingLocalStorage");
            if (values.locationType === "cloud") {
                console.log("JustbeforeSetting_CLOUD_inLocalStorage");
                var cloudSpecfications = values;
                appendItem("cloudSpecifications", cloudSpecfications);
            } else {
                console.log("JustbeforeSetting_USER_LocalStorage");
                var userSpecfications = values;
                appendItem("userRequirements", userSpecfications);
            }

            setMarker(values);
        }

        function setMarker(values) {
            console.log("settingMarker", values);
            var marker = new google.maps.Marker({
                position: values.location,
                //position: event.latLng,
                map: map,
                title: values.locationTitle + " | " + values.universalId
            });

            var dataCenterSizeCircle = new google.maps.Circle({
                strokeColor: '#00FF00',
                strokeOpacity: 0.6,
                strokeWeight: 2,
                fillColor: values.locationType === "cloud" ? '#0000FF' : '#00FF00',
                fillOpacity: 0.35,
                map: map,
                //center: event.latLng,
                center: values.location,
                radius: Math.log(values.cpuCount + values.memorySize) * 5000
            });

            marker.locationType = values.locationType;
            marker.universalId = values.universalId;
            //Original Place of persistence to localstorage
            //marker.universalId = universalIdCounter;
            //universalIdCounter++;


            var markerContextMenu = new ContextMenu(map, markerContextMenuOptions);

            google.maps.event.addListener(markerContextMenu, 'menu_item_selected',
                function(latLng, eventName, source) {
                    switch (eventName) {
                    case 'menu_delete_clicked':

                        markerContextMenu.hide();
                        marker.setMap(null);

                        console.log("Marker Deleted!", marker);

                        dataCenterSizeCircle.setMap(null);


                        if (marker.locationType === "cloud") {
                            removeMarker("cloudSpecifications", marker.universalId);
                        } else {
                            removeMarker("userRequirements", marker.universalId);
                        }

                        removeConnectionsFromMapForMarker(marker.universalId);
                        marker = null;
                        dataCenterSizeCircle = null;

                        // Load Connections and Delete Them!
                        break;
                    case 'menu_connect_clicked':
                        markerContextMenu.hide();
                        $('#linkModal').modal('show');
                        linkEventData = marker;
                        break;
                    default:
                        // freak out
                        console.log("Freaking Out!!!");
                        break;
                    }
                });

            marker.addListener('rightclick', function(mouseEvent) {
                markerContextMenu.show(mouseEvent.latLng, map);
            });

            marker.addListener('click', function(mouseEvent) {
                var startMarker = null;
                var endMarker = null;
                if (connectStartPoint != null) {
                    connectEndPoint = { lat: marker.getPosition().lat(), lng: marker.getPosition().lng() }
                    console.log("EndPoint: ", connectEndPoint.lat, connectEndPoint.lng);


                    endMarker = marker;
                    endMarker.location = { lat: marker.getPosition().lat(), lng: marker.getPosition().lng() };

                    startMarker = connectionStartMarker;
                    startMarker.location = { lat: connectionStartMarker.getPosition().lat(), lng: connectionStartMarker.getPosition().lng() };

                    console.log("marker", marker);
                    console.log("BeforeSettingConnection! - start", startMarker);
                    console.log("BeforeSettingConnection! - end", endMarker);
                    setConnection(startMarker, endMarker);
                }
            });

            markers.push(marker);
            dataCenterSizecircles.push(dataCenterSizeCircle);

            $('#locationModal').modal('hide');
        }

        function setLink(marker) {
            $('#linkModal').modal('hide');
            linkBandwidth = $('#linkBandwidth').val();
            console.log("Select Endpoint!");
            connectStartPoint = { lat: marker.getPosition().lat(), lng: marker.getPosition().lng() }
            connectStartPointId = marker.universalId;
            connectionStartMarker = marker;
            console.log("StartPoint: ", connectStartPoint.lat, connectStartPoint.lng);
        }

        //connection changed
        function setConnection(startMarker, endMarker) {
            if (endMarker == null || startMarker == null) {
                console.error("Select the Starting Point by Selecting Connect from the Context Menu on the Marker. " +
                    "Right CLick on Marker for Context Menu");
                return;
            }

            console.log("cloud marker - startMarker: ", startMarker);
            console.log("user marker - endMarker: ", endMarker);

            var distance = google.maps.geometry.spherical.computeDistanceBetween(
                new google.maps.LatLng(startMarker.location.lat, startMarker.location.lng),
                new google.maps.LatLng(endMarker.location.lat, endMarker.location.lng));

            console.log("Distance: ", distance / 1000, "km");

            var connection = new google.maps.Polyline({
                path: [
                    new google.maps.LatLng(startMarker.location.lat, startMarker.location.lng),
                    new google.maps.LatLng(endMarker.location.lat, endMarker.location.lng)
                ],
                geodesic: true,
                strokeColor: '#0000FF',
                strokeOpacity: 0.5,
                strokeWeight: 7
            });
            //Continue from here
            connection.startPointId = startMarker.universalId;
            connection.startPointType = startMarker.locationType;
            connection.endPointId = endMarker.universalId;
            connection.endPointType = endMarker.locationType;
            connection.linkBandwidth = linkBandwidth;

            if (connection.startPointId === 0 || connection.endPointId === 0) {
                console.error("SOmething went Wrong!!");
                console.log("StartPointID: " + connection.startPointId);
                console.log("EndPointId: " + connection.endPointId);
            }

            var connectionSpecification = {
                "startPointId": connection.startPointId,
                "startPointType": connection.startPointType,
                "endPointId": connection.endPointId,
                "endPointType": connection.endPointType,
                "distance": distance / 1000,
                "linkBandwidth": linkBandwidth
            }
            appendConnection("connections", connectionSpecification);


            var connectionContextMenu = new ContextMenu(map, connectionContextMenuOptions);
            google.maps.event.addListener(connectionContextMenu, 'menu_item_selected',
                function(latLng, eventName, source) {
                    switch (eventName) {
                    case 'connection_delete_clicked':

                        connectionContextMenu.hide();
                        connection.setMap(null);
                        removeConnection("connections", connection.startPointId, connection.endPointId);
                        connection = null;
                        console.log("Connection Deleted!");
                        break;
                    default:
                        // freak out
                        break;
                    }
                });
            connection.addListener('rightclick', function(mouseEvent) {
                connectionContextMenu.show(mouseEvent.latLng, map);
            });
            connection.setMap(map);

            connections.push(connection);

            startMarker = null;
            endMarker = null;
            connectStartPoint = null;
            connectEndPoint = null;
            connectionStartMarker = null;
        }

        $(function() {
            $('#locationType').change(function() {
                if ($(this).val() === "user") {
                    $('#cloudForm').hide();
                    $('#thresholdForm').show();
                }
                if ($(this).val() === "cloud") {
                    $('#cloudForm').show();
                    $('#thresholdForm').hide();
                }
            });
        });

        //Delete Everything on Map
        //Clear Local Storage Cache
        function resetMap() {
            for (var m in markers) {
                markers[m].setMap(null);
                markers[m] = null;
            }
            markers = [];

            for (var d in dataCenterSizecircles) {
                dataCenterSizecircles[d].setMap(null);
                dataCenterSizecircles[d] = null;
            }
            dataCenterSizecircles = [];

            for (var c in connections) {
                connections[c].setMap(null);
                connections[c] = null;
            }
            connections = [];

            localStorage.clear();
            universalIdCounter = 0;
            console.log("Map Reset!");
        }

        //Loads Markers and Connections based on Data in local storage
        function loadMapFromLocalStorage() {
            var cloudSpecificationsArray = JSON.parse(localStorage.getItem("cloudSpecifications"));
            var userRequirementsArray = JSON.parse(localStorage.getItem("userRequirements"));
            var connectionsArray = JSON.parse(localStorage.getItem("connections"));

            if (cloudSpecificationsArray != null && cloudSpecificationsArray.length > 0) {
                console.log("Local Storage Not Empty. Loading Cloud Specifications");
                //universalIdCounter = cloudSpecificationsArray[cloudSpecificationsArray.length - 1].universalId;
                for (var c in cloudSpecificationsArray) {
                    setMarker(cloudSpecificationsArray[c]);
                }
            }

            if (userRequirementsArray != null && userRequirementsArray.length > 0) {
                console.log("Local Storage Not Empty. Loading User Requirements");
                //universalIdCounter = userRequirementsArray[userRequirementsArray.length - 1].universalId;
                for (var u in userRequirementsArray) {
                    setMarker(userRequirementsArray[u]);
                }
            }


            if (connectionsArray != null && connectionsArray.length > 0) {
                console.log("Local Storage Not Empty. Loading Connections");
                for (var n in connectionsArray) {
                    //setMarker(connectionsArray[n]);

                    console.log("Set Connection - Start Id: ", connectionsArray[n].startPointId);
                    console.log("Set Connection - End Id: ", connectionsArray[n].endPointId);

                    console.log("Set Connection - Start Type: ", connectionsArray[n].startPointType);
                    console.log("Set Connection - End Type: ", connectionsArray[n].endPointType);

                    var startMarker = null;
                    var endMarker = null;
                    if (connectionsArray[n].startPointType === "cloud") {
                        console.log("Start is Cloud");
                        startMarker = getMarker(cloudSpecificationsArray, connectionsArray[n].startPointId);
                    } else {
                        console.log("Start is User");
                        startMarker = getMarker(userRequirementsArray, connectionsArray[n].startPointId);
                    }

                    if (connectionsArray[n].endPointType === "cloud") {
                        console.log("End is Cloud");
                        endMarker = getMarker(cloudSpecificationsArray, connectionsArray[n].endPointId);
                    } else {
                        console.log("End is Cloud");
                        endMarker = getMarker(userRequirementsArray, connectionsArray[n].endPointId);
                    }
                    //var startMarker = 
                    //var endMarker = 

                    console.log("Set Connection - Start Marker: ", startMarker);
                    console.log("Set Connection - End Marker: ", endMarker);
                    setConnection(startMarker, endMarker);
                }
            }

            universalIdCounter = getMaxId(cloudSpecificationsArray, userRequirementsArray);
            universalIdCounter++;
            console.log("UniversalIdCounterAt: ", universalIdCounter);
        }

        function getMaxId(cloud, user) {

            var cloudMax = cloud != null ? cloud[cloud.length - 1].universalId : -1;
            var userMax = user != null ? user[user.length - 1].universalId : -1;
            console.log("UniversalIdCounter - cloudMax: ", cloudMax);
            console.log("UniversalIdCounter - userMax: ", userMax);

            return cloudMax > userMax ? cloudMax : userMax;
        }

        //appends item to local storage
        //append only if not exists
        function appendItem(key, item) {
            var itemArray = [];
            if (localStorage.getItem(key) != null) {
                itemArray = JSON.parse(localStorage.getItem(key));
            }
            itemArray.push(item);
            localStorage.setItem(key, JSON.stringify(itemArray));
        }

        //appends item to local storage
        //append only if not exists
        function appendConnection(key, item) {
            var itemArray = [];
            if (localStorage.getItem(key) != null) {
                itemArray = JSON.parse(localStorage.getItem(key));
            }

            var found = -1;

            //This is bad!! Not generic! Only FOr COnnection. If connection already exists dont pus it.
            //if its marker the following condition will always return false and it will always be addeds
            for (var i = 0; i < itemArray.length; i++) {
                console.log("inAppendItemForArray - ITEM", item);
                console.log("inAppendItemForArray - ITEM Array Element", itemArray[i]);
                if (itemArray[i].startPointId === item.startPointId && itemArray[i].endPointId === item.endPointId) {
                    console.log("inAppendItemForArray- FOUND");
                    found = 1;
                    break;
                }
            }

            if (found === -1) {
                itemArray.push(item);
            }

            localStorage.setItem(key, JSON.stringify(itemArray));
        }

        //deletes a connection from local storage
        function removeConnection(key, startId, endId) {
            var itemArray = [];
            if (localStorage.getItem(key) != null) {
                itemArray = JSON.parse(localStorage.getItem(key));
            }

            console.log("In Filtering Out: ", startId, endId);
            console.log("ItemArray before Filter ", itemArray);

            itemArray = itemArray.filter(function(item) {
                return (!(item.startPointId === startId && item.endPointId === endId)); // || (item.cloudId !== endId && item.userId !== startId));
            });

            console.log("ItemArray after Filter ", itemArray);

            localStorage.setItem(key, JSON.stringify(itemArray));
        }

        function removeMarker(key, id) {
            var itemArray = [];

            if (localStorage.getItem(key) != null) {
                itemArray = JSON.parse(localStorage.getItem(key));
            }

            itemArray = itemArray.filter(function(item) {
                return (!(item.universalId === id));
            });

            console.log("ItemArray after Filter ", itemArray);

            localStorage.setItem(key, JSON.stringify(itemArray));

            removeConnectionForMarker("connections", id);
        }

        //deletes a connection from local storage
        function removeConnectionForMarker(key, markerId) {
            var itemArray = [];
            if (localStorage.getItem(key) != null) {
                itemArray = JSON.parse(localStorage.getItem(key));
            }

            console.log("In Filtering Out: ", markerId);
            console.log("ItemArray before Filter ", itemArray);

            itemArray = itemArray.filter(function(item) {
                return (!(item.startPointId === markerId || item.endPointId === markerId)); // || (item.cloudId !== endId && item.userId !== startId));
            });

            console.log("ItemArray after Filter ", itemArray);

            localStorage.setItem(key, JSON.stringify(itemArray));
        }


        function removeConnectionsFromMapForMarker(markerId) {
            for (var n in connections) {
                if (connections[n].startPointId === markerId || connections[n].endPointId === markerId) {
                    connections[n].setMap(null);
                    //connections[n] = null;
                    //connections.splice(n, 1);
                    //n--;
                }
            }
        }

        function getMarker(array, id) {
            console.log("getMarker Array: ", array);
            console.log("getMarker id: ", id);
            for (var j = 0; j < array.length; j++) {

                if (array[j].universalId === id) {
                    return array[j];
                }
                //else if (array[j].userId === id) {
                //    return array[j];
                //}
            }
        }

        function sendData() {
            var cloudSpecifications = JSON.parse(localStorage.getItem("cloudSpecifications"));
            var userRequirements = JSON.parse(localStorage.getItem("userRequirements"));
            var connections = JSON.parse(localStorage.getItem("connections"));

            //$('#hidCloudSpecifications').val(cloudSpecifications);
            //$('#hidUserRequirements').val(userRequirements);
            //$('#hidConnections').val(connections);

            var model = {
                CloudSpecifications: cloudSpecifications,
                UserRequirements: userRequirements,
                Connections: connections
            };

            console.log("Model: ", model);
            localStorage.setItem("Model", JSON.stringify(model));

            $('#hidModel').val(JSON.stringify(model));

        }
    </script>
    <script src="http://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyCv1wLOZxBKqjcE0oqmny3SZ3NWn45oCW8&libraries=geometry&callback=initMap"></script>
    <script src="../../Scripts/map/context-menu.js"></script>
    <script src="../../Scripts/map/map-context-menu-init.js"></script>
    <script src="../../Scripts/map/marker-context-menu-init.js"></script>
    <script src="../../Scripts/map/connection-context-menu-init.js"></script>

    <script type="text/javascript">
        //var mapContextMenu = new ContextMenu(map, mapContextMenuOptions);

        //google.maps.event.addListener(mapContextMenu, 'menu_item_selected',
        //    function (latLng, eventName, source) {
        //        switch (eventName) {
        //            case 'option1_clicked':
        //                // do something
        //                break;
        //            case 'option2_clicked':
        //                // do something else
        //                break;
        //            default:
        //                // freak out
        //                break;
        //        }
        //    });

        //google.maps.event.addListener(map, 'rightclick', function (mouseEvent) {
        //    mapContextMenu.show(mouseEvent.latLng, map);
        //});


    
    </script>

}